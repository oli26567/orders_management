/**
 * Data Access Object for Bill (formerly Log) operations.
 * This class does NOT extend AbstractDAO to enforce immutability and restrict updates.
 * It provides only insert and find operations for Bill objects.
 */
package org.example.a3.dao;

import org.example.a3.Model.Bill; // Using Bill record
import org.example.a3.connection.ConnectionFactory;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class BillDAO {
    protected static final Logger LOGGER = Logger.getLogger(BillDAO.class.getName());
    private static final String TABLE_NAME = "log";

    /**
     * Inserts a new Bill object into the 'log' table.
     * Assumes 'billId' is auto-generated by the database.
     * @param bill The Bill object to insert.
     * @return The inserted Bill object (with potentially updated billId if auto-generated).
     */
    public Bill insert(Bill bill) {
        String query = "INSERT INTO " + TABLE_NAME + " (orderId, totalAmount) VALUES (?, ?)";
        try (Connection connection = ConnectionFactory.getConnection();
             PreparedStatement ps = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {

            ps.setInt(1, bill.orderId());
            ps.setDouble(2, bill.totalAmount());

            ps.executeUpdate();

            try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    int id = generatedKeys.getInt(1);
                    return new Bill(id, bill.orderId(), bill.totalAmount());
                }
            }
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, "Insert failed for Bill: " + e.getMessage());
        }
        return bill;
    }

    /**
     * Retrieves all Bill objects from the 'log' table.
     * @return A list of all Bill objects.
     */
    public List<Bill> findAll() {
        List<Bill> list = new ArrayList<>();
        String query = "SELECT billId, orderId, totalAmount FROM " + TABLE_NAME;
        try (Connection connection = ConnectionFactory.getConnection();
             PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                int billId = resultSet.getInt("billId");
                int orderId = resultSet.getInt("orderId");
                double totalAmount = resultSet.getDouble("totalAmount");
                list.add(new Bill(billId, orderId, totalAmount));
            }

        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, "BillDAO:findAll " + e.getMessage());
        }
        return list;
    }

    /**
     * Finds a Bill object by its billId.
     * @param billId The ID of the bill to find.
     * @return The found Bill object, or null if not found.
     */
    public Bill findById(int billId) {
        String query = "SELECT billId, orderId, totalAmount FROM " + TABLE_NAME + " WHERE billId = ?";
        try (Connection connection = ConnectionFactory.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {

            statement.setInt(1, billId);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    int foundBillId = resultSet.getInt("billId");
                    int orderId = resultSet.getInt("orderId");
                    double totalAmount = resultSet.getDouble("totalAmount");
                    return new Bill(foundBillId, orderId, totalAmount);
                }
            }
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, "BillDAO:findById " + e.getMessage());
        }
        return null;
    }
}